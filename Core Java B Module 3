22. 

import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class FileWritingDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter a string to write to the file: ");
        String input = scanner.nextLine();
        
        try (FileWriter writer = new FileWriter("output.txt")) {
            writer.write(input);
            System.out.println("Data has been written to output.txt");
        } catch (IOException e) {
            System.out.println("An error occurred while writing the file.");
            e.printStackTrace();
        }
        
        scanner.close();
    }
}

23.

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileReadingDemo {
    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new FileReader("output.txt"))) {
            String line;
            System.out.println("Contents of output.txt:");
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("An error occurred while reading the file.");
            e.printStackTrace();
        }
    }
}

24.

import java.util.ArrayList;
import java.util.Scanner;

public class StudentListDemo {
    public static void main(String[] args) {
        ArrayList<String> studentNames = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter student names (type 'done' to finish):");

        while (true) {
            System.out.print("Name: ");
            String name = scanner.nextLine();
            if (name.equalsIgnoreCase("done")) {
                break;
            }
            studentNames.add(name);
        }

        System.out.println("\nStudent names entered:");
        for (String student : studentNames) {
            System.out.println(student);
        }

        scanner.close();
    }
}

25.

import java.util.HashMap;
import java.util.Scanner;

public class StudentMapDemo {
    public static void main(String[] args) {
        HashMap<Integer, String> studentMap = new HashMap<>();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Add student entries (type ID and Name). Type -1 as ID to stop.");

        while (true) {
            System.out.print("Enter student ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // consume newline

            if (id == -1) {
                break;
            }

            System.out.print("Enter student name: ");
            String name = scanner.nextLine();

            studentMap.put(id, name);
        }

        System.out.print("Enter a student ID to retrieve the name: ");
        int searchId = scanner.nextInt();

        if (studentMap.containsKey(searchId)) {
            System.out.println("Student Name: " + studentMap.get(searchId));
        } else {
            System.out.println("No student found with ID: " + searchId);
        }

        scanner.close();
    }
}

26.

// Approach 1: Extending Thread class
class MyThread extends Thread {
    private String message;

    public MyThread(String message) {
        this.message = message;
    }

    @Override
    public void run() {
        for(int i = 0; i < 5; i++) {
            System.out.println(message + " - Count: " + i);
            try {
                Thread.sleep(500); // Sleep to better observe interleaving
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class ThreadDemo {
    public static void main(String[] args) {
        MyThread t1 = new MyThread("Thread 1 is running");
        MyThread t2 = new MyThread("Thread 2 is running");

        t1.start();
        t2.start();
    }
}

27.

import java.util.*;

public class LambdaSortDemo {
    public static void main(String[] args) {
        List<String> fruits = new ArrayList<>();
        fruits.add("Banana");
        fruits.add("Apple");
        fruits.add("Mango");
        fruits.add("Grapes");
        fruits.add("Orange");

        // Sort the list using lambda expression
        Collections.sort(fruits, (s1, s2) -> s1.compareTo(s2));

        // Display the sorted list
        System.out.println("Sorted list: " + fruits);
    }
}

28.

import java.util.*;
import java.util.stream.Collectors;

public class StreamFilterDemo {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(10, 15, 22, 33, 40, 55, 60);

        // Filter even numbers using Stream API and collect to a new list
        List<Integer> evenNumbers = numbers.stream()
                                           .filter(n -> n % 2 == 0)
                                           .collect(Collectors.toList());

        // Display the even numbers
        System.out.println("Even numbers: " + evenNumbers);
    }
}

29.

import java.util.*;
import java.util.stream.Collectors;

public class RecordDemo {
    // Define the record (Java 16+)
    public record Person(String name, int age) {}

    public static void main(String[] args) {
        // Create some Person instances
        Person p1 = new Person("Alice", 23);
        Person p2 = new Person("Bob", 30);
        Person p3 = new Person("Charlie", 18);
        Person p4 = new Person("Diana", 27);

        // Print individual records
        System.out.println(p1);
        System.out.println(p2);

        // Create a list of Person records
        List<Person> people = List.of(p1, p2, p3, p4);

        // Filter people aged 25 or older using Stream API
        List<Person> filtered = people.stream()
                                      .filter(person -> person.age() >= 25)
                                      .collect(Collectors.toList());

        System.out.println("People aged 25 or older: " + filtered);
    }
}

30.

public class TypeChecker {

    public static void checkObjectType(Object obj) {
        String result = switch (obj) {
            case Integer i -> "It's an Integer with value: " + i;
            case String s -> "It's a String with value: \"" + s + "\"";
            case Double d -> "It's a Double with value: " + d;
            case null -> "It's null!";
            default -> "Unknown type: " + obj.getClass().getSimpleName();
        };

        System.out.println(result);
    }

    public static void main(String[] args) {
        checkObjectType(42);          // Integer
        checkObjectType("Hello");     // String
        checkObjectType(3.14);        // Double
        checkObjectType(true);        // Unknown type
        checkObjectType(null);        // null
    }
}

31.

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;

public class JdbcSQLiteExample {

    public static void main(String[] args) {
        // SQLite connection string
        String url = "jdbc:sqlite:school.db"; // Ensure this file exists in your project directory

        // SQL query to execute
        String query = "SELECT * FROM students";

        try (
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query)
        ) {
            System.out.println("Connected to SQLite database.");

            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int grade = rs.getInt("grade");

                System.out.println("ID: " + id + ", Name: " + name + ", Grade: " + grade);
            }

        } catch (SQLException e) {
            System.out.println("Database connection failed: " + e.getMessage());
        }
    }
}


32.

public class Student {
    private int id;
    private String name;
    private int age;
    private String email;

    // Constructors, getters, and setters
    public Student(int id, String name, int age, String email) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.email = email;
    }

    public int getId() { return id; }
    public String getName() { return name; }
    public int getAge() { return age; }
    public String getEmail() { return email; }

    public void setName(String name) { this.name = name; }
    public void setAge(int age) { this.age = age; }
    public void setEmail(String email) { this.email = email; }
}

=>import java.sql.*;

public class StudentDAO {
    private static final String URL = "jdbc:mysql://localhost:3306/your_db";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    // Method to insert a student
    public void insertStudent(Student student) {
        String sql = "INSERT INTO students (id, name, age, email) VALUES (?, ?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, student.getId());
            pstmt.setString(2, student.getName());
            pstmt.setInt(3, student.getAge());
            pstmt.setString(4, student.getEmail());

            int rowsInserted = pstmt.executeUpdate();
            System.out.println(rowsInserted + " student(s) inserted.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to update a student
    public void updateStudent(Student student) {
        String sql = "UPDATE students SET name = ?, age = ?, email = ? WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, student.getName());
            pstmt.setInt(2, student.getAge());
            pstmt.setString(3, student.getEmail());
            pstmt.setInt(4, student.getId());

            int rowsUpdated = pstmt.executeUpdate();
            System.out.println(rowsUpdated + " student(s) updated.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


33.

CREATE TABLE accounts (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    balance REAL NOT NULL
);

INSERT INTO accounts (name, balance) VALUES ('Alice', 1000.0), ('Bob', 500.0);



import java.sql.*;

public class JdbcTransactionExample {

    public static void main(String[] args) {
        String url = "jdbc:sqlite:bank.db";

        try (Connection conn = DriverManager.getConnection(url)) {
            transfer(conn, 1, 2, 200.0);  // Transfer 200 from Alice (id=1) to Bob (id=2)
        } catch (SQLException e) {
            System.out.println("Connection failed: " + e.getMessage());
        }
    }

    public static void transfer(Connection conn, int fromAccountId, int toAccountId, double amount) {
        String debitSQL = "UPDATE accounts SET balance = balance - ? WHERE id = ?";
        String creditSQL = "UPDATE accounts SET balance = balance + ? WHERE id = ?";

        try {
            conn.setAutoCommit(false); // Begin transaction

            try (
                PreparedStatement debitStmt = conn.prepareStatement(debitSQL);
                PreparedStatement creditStmt = conn.prepareStatement(creditSQL)
            ) {
                // Debit
                debitStmt.setDouble(1, amount);
                debitStmt.setInt(2, fromAccountId);
                int debitResult = debitStmt.executeUpdate();

                // Credit
                creditStmt.setDouble(1, amount);
                creditStmt.setInt(2, toAccountId);
                int creditResult = creditStmt.executeUpdate();

                if (debitResult == 1 && creditResult == 1) {
                    conn.commit();
                    System.out.println("Transfer successful.");
                } else {
                    conn.rollback();
                    System.out.println("Transfer failed. Rolled back.");
                }

            } catch (SQLException e) {
                conn.rollback();
                System.out.println("Error during transfer. Rolled back. " + e.getMessage());
            } finally {
                conn.setAutoCommit(true); // Restore default behavior
            }

        } catch (SQLException e) {
            System.out.println("Transaction failed: " + e.getMessage());
        }
    }
}


34.

// Simulating com.utils.Utils
class Utils {
    public static String greet(String name) {
        return "Hello, " + name + "!";
    }
}

// Simulating com.greetings.Main
public class Main {
    public static void main(String[] args) {
        System.out.println(Utils.greet("Java Modules"));
    }
}

35.

=>SERVER

import java.io.*;
import java.net.*;

public class ChatServer {
    public static void main(String[] args) {
        int port = 12345;

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server started. Waiting for client...");

            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected!");

            BufferedReader in = new BufferedReader(
                new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
            BufferedReader console = new BufferedReader(new InputStreamReader(System.in));

            String clientMsg, serverMsg;
            while ((clientMsg = in.readLine()) != null) {
                System.out.println("Client: " + clientMsg);
                System.out.print("You: ");
                serverMsg = console.readLine();
                out.println(serverMsg);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

=>CLIENT

import java.io.*;
import java.net.*;

public class ChatClient {
    public static void main(String[] args) {
        String host = "localhost";
        int port = 12345;

        try (Socket socket = new Socket(host, port)) {
            System.out.println("Connected to server!");

            BufferedReader in = new BufferedReader(
                new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
            BufferedReader console = new BufferedReader(new InputStreamReader(System.in));

            String userMsg, serverMsg;
            while (true) {
                System.out.print("You: ");
                userMsg = console.readLine();
                out.println(userMsg);

                serverMsg = in.readLine();
                if (serverMsg != null) {
                    System.out.println("Server: " + serverMsg);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


36.

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class GitHubApiExample {
    public static void main(String[] args) {
        String url = "https://api.github.com/users/octocat"; // Sample GitHub API

        try {
            // Create HttpClient
            HttpClient client = HttpClient.newHttpClient();

            // Create HttpRequest
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .GET()
                    .build();

            // Send request and get response
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            // Print status code and body
            System.out.println("Status Code: " + response.statusCode());
            System.out.println("Response Body:");
            System.out.println(response.body());

            // Optional: Parse JSON using Gson
            JsonObject json = JsonParser.parseString(response.body()).getAsJsonObject();
            System.out.println("\nParsed JSON:");
            System.out.println("Login: " + json.get("login").getAsString());
            System.out.println("Name: " + json.get("name").getAsString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

37.

public class Example {
    public int add(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        Example obj = new Example();
        System.out.println("Sum: " + obj.add(5, 3));
    }
}

Compiled from "Example.java"
public class Example {
  public Example();
    Code:
       0: aload_0
       1: invokespecial #1  // calls Object constructor
       4: return

  public int add(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: iadd
       3: ireturn

  public static void main(java.lang.String[]);
    Code:
       0: new           #2   // class Example
       3: dup
       4: invokespecial #1   // Example.<init>
       7: astore_1
       8: getstatic     #3   // System.out
      11: new           #4   // StringBuilder
      14: dup
      15: invokespecial #5   // StringBuilder.<init>
      18: ldc           #6   // "Sum: "
      20: invokevirtual #7   // append(String)
      23: aload_1
      24: iconst_5
      25: iconst_3
      26: invokevirtual #8   // Example.add
      29: invokevirtual #9   // append(int)
      32: invokevirtual #10  // toString
      35: invokevirtual #11  // println
      38: return
}

38.

public class Sample {
    public void greet(String name) {
        System.out.println("Hello, " + name + "!");
    }

    public static void main(String[] args) {
        Sample s = new Sample();
        s.greet("World");
    }
}


39.

public class Person {
    private String name;

    public Person() {
        this.name = "Default";
    }

    public Person(String name) {
        this.name = name;
    }

    public void sayHello() {
        System.out.println("Hello, my name is " + name);
    }

    public void greet(String greeting) {
        System.out.println(greeting + ", " + name);
    }
}


import java.lang.reflect.Method;

public class ReflectionDemo {
    public static void main(String[] args) {
        try {
            // Load class dynamically
            Class<?> cls = Class.forName("Person");

            System.out.println("Methods in " + cls.getName() + ":");
            Method[] methods = cls.getDeclaredMethods();

            // Print method names and parameters
            for (Method method : methods) {
                System.out.print(method.getName() + "(");
                Class<?>[] params = method.getParameterTypes();
                for (int i = 0; i < params.length; i++) {
                    System.out.print(params[i].getSimpleName());
                    if (i < params.length - 1) System.out.print(", ");
                }
                System.out.println(")");
            }

            // Create instance using default constructor
            Object obj = cls.getDeclaredConstructor().newInstance();

            // Invoke sayHello() dynamically
            Method sayHello = cls.getDeclaredMethod("sayHello");
            sayHello.invoke(obj);

            // Invoke greet(String) dynamically
            Method greet = cls.getDeclaredMethod("greet", String.class);
            greet.invoke(obj, "Good morning");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

40.

public class VirtualThreadDemo {
    public static void main(String[] args) throws InterruptedException {
        int threadCount = 100_000;

        // Measure virtual threads
        long startVirtual = System.currentTimeMillis();
        Thread[] virtualThreads = new Thread[threadCount];
        for (int i = 0; i < threadCount; i++) {
            virtualThreads[i] = Thread.ofVirtual().start(() -> {
                // Minimal work to avoid huge console spam
                // System.out.println("Hello from virtual thread " + Thread.currentThread().getName());
            });
        }
        for (Thread t : virtualThreads) t.join();
        long endVirtual = System.currentTimeMillis();
        System.out.println("Virtual threads time: " + (endVirtual - startVirtual) + " ms");

        // Measure traditional threads
        long startTraditional = System.currentTimeMillis();
        Thread[] traditionalThreads = new Thread[threadCount];
        for (int i = 0; i < threadCount; i++) {
            traditionalThreads[i] = new Thread(() -> {
                // Minimal work to avoid huge console spam
                // System.out.println("Hello from traditional thread " + Thread.currentThread().getName());
            });
            traditionalThreads[i].start();
        }
        for (Thread t : traditionalThreads) t.join();
        long endTraditional = System.currentTimeMillis();
        System.out.println("Traditional threads time: " + (endTraditional - startTraditional) + " ms");
    }
}

41.

import java.util.concurrent.*;
import java.util.*;

public class CallableExample {
    public static void main(String[] args) throws Exception {
        // Create a fixed thread pool with 3 threads
        ExecutorService executor = Executors.newFixedThreadPool(3);

        // List of Callable tasks
        List<Callable<String>> tasks = new ArrayList<>();
        tasks.add(() -> {
            Thread.sleep(1000);
            return "Task 1 result";
        });
        tasks.add(() -> {
            Thread.sleep(500);
            return "Task 2 result";
        });
        tasks.add(() -> {
            return "Task 3 result";
        });

        // Submit all tasks and get Futures
        List<Future<String>> futures = new ArrayList<>();
        for (Callable<String> task : tasks) {
            futures.add(executor.submit(task));
        }

        // Retrieve and print results
        for (Future<String> future : futures) {
            String result = future.get();  // blocks until result is ready
            System.out.println(result);
        }

        // Shutdown the executor
        executor.shutdown();
    }
}
